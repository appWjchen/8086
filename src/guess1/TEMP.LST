00001                                           export _main
00002 0000                                      .text
00003                       00000000>           _main:
00004 0000           EB           2C                    jmp _start
00005 0002                        49            _msg1:  .ascii "Input guess (0 ~ 9) : "
00006 0018                        69            _msg2:  .ascii "input error"
00007 0023                        66            _msg3:  .ascii "fail"
00008 0027                        73            _msg4:  .ascii "success"
00009                                           
00010                       00000016            _msg1len:   equ     _msg2 - _msg1
00011                       0000000B            _msg2len:   equ     _msg3 - _msg2
00012                       00000004            _msg3len:   equ     _msg4 - _msg3
00013                       00000007            _msg4len:   equ     _start - _msg4
00014                                           
00015                       0000002E>           _start:
00016 002E           B4                     2C          mov     ah, #0x2c       ; get time
00017 0030           CD                     21          int     0x21
00018 0032           88D0                               mov     al, dl          ; dl almost random 0~99
00019 0034           B4                     00          mov     ah, #0
00020 0036           B3                     0B          mov     bl, #11
00021 0038           FECB                               dec     bl
00022 003A           F6F3                               div     bl              ; random / 10 , al 0 ~ 9
00023 003C           A2         0500                    mov     0x500, al       ; save al in 0x500 
00024                       0000003F>           _readA:
00025 003F           B4                     03          mov     ah, #0x03
00026 0041           BB                   0000          mov     bx, #0
00027 0044           CD                     10          int     0x10
00028 0046           B9                   0016          mov     cx, #_msg1len
00029 0049           B8                   0002>         mov     ax, #_msg1
00030 004C           05                   0100          add     ax, #0x100
00031 004F           89C5                               mov     bp, ax
00032 0051           BB                   000F          mov     bx, #0x000f
00033 0054           B8                   1301          mov     ax, #0x1301
00034 0057           CD                     10          int     0x10
00035 0059           B4                     10          mov     ah, #0x10
00036 005B           CD                     16          int     0x16
00037 005D           B9                   0001          mov     cx, #1
00038 0060           B7                     00          mov     bh, #0
00039 0062           B4                     05          mov     ah, #5
00040 0064           80C4                   05          add     ah, #5      ; user press a key
00041 0067           CD                     10          int     0x10        ; al = key pressed
00042 0069           B4                     03          mov     ah, #0x03
00043 006B           BB                   0000          mov     bx, #0
00044 006E           CD                     10          int     0x10
00045 0070           FEC6                               inc     dh
00046 0072           B2                     00          mov     dl, #0
00047 0074           88C4                               mov     ah, al      ; save the key in ah
00048 0076           B0                     39          mov     al, #0x39   
00049 0078           28E0                               sub     al, ah      ; 0x39 - input ascii
00050 007A           72           1C                    jc      _error      ; set carry -> input > 0x39
00051 007C           88E0                               mov     al, ah      ; restore saved al
00052 007E           2C                     30          sub     al, #0x30   ; input ascii - 0x30
00053 0080           72           16                    jc      _error      ; set carry -> input < 0x30
00054                       00000082>           inputOK:                    ; input ok
00055 0082           2A06       0500                    subb    al, 0x500   ; input - random
00056 0086           75           08                    jnz     _guessfail
00057 0088           B9                   0007          mov     cx, #_msg4len
00058 008B           B8                   0027>         mov     ax, #_msg4  ; guess success message
00059 008E           EB           0E                    jmp     _outmsg
00060                       00000090>           _guessfail:
00061 0090           B9                   0004          mov     cx, #_msg3len
00062 0093           B8                   0023>         mov     ax, #_msg3  ; guess fail message
00063 0096           EB           06                    jmp     _outmsg
00064                       00000098>           _error:
00065 0098           B9                   000B          mov     cx, #_msg2len
00066 009B           B8                   0018>         mov     ax, #_msg2  ; input error
00067                       0000009E>           _outmsg:
00068 009E           05                   0100          add     ax, #0x100
00069 00A1           89C5                               mov     bp, ax
00070 00A3           BB                   000F          mov     bx, #0x000f
00071 00A6           B8                   1301          mov     ax, #0x1301
00072 00A9           CD                     10          int     0x10
00073                       000000AB>           _endp:
00074 00AB           B8                   4C00          mov     ax, #0x4c00
00075 00AE           CD                     21          int     0x21     
00076 0000                                      .data
00077 0000                                      .bss

Symbols:
                     _endp  0 00AB R                       _error  0 0098 R   
                _guessfail  0 0090 R                        _main  0 0000 R E 
                     _msg1  0 0002 R                     _msg1len  0 0016 A   
                     _msg2  0 0018 R                     _msg2len  0 000B A   
                     _msg3  0 0023 R                     _msg3len  0 0004 A   
                     _msg4  0 0027 R                     _msg4len  0 0007 A   
                   _outmsg  0 009E R                       _readA  0 003F R   
                    _start  0 002E R                      inputOK  0 0082 R   

00000 errors
00000 warnings
